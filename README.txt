La taskul 1 am copiat vectorul de tip void info intr un vector de tip unsigned char, in functie de care am luat, pentru fiecare avion, datele acestuia si le am afisat corespunzator, in functie de tipul fiecaruia.

La taskul 2 am umplut initial matricea mat cu '.', dupa care am salvat, pentru fiecare avion, directia si tipul avionului intr o variabila de tipul const char, dupa care (comparand cu valorile ASCII corespunzatoare), am verificat daca   tipul avioanelor este 1 sau 2, respectiv daca directia este N, S, W sau E, si am pus '*' pe pozitiile din matricea mat corespunzatoare avioanelor, dupa care am afisat matricea.

La taskul 3 am creat functiile compare_plane_type, compare_plane_codes si compare_plane_velocity care compara intre doua avioane, tipul, codurile respectiv viteza acestora. In functia principala, aplic qsort pe vectorul info, oentru a sorta avioanele in functie de tip, dupa care numar cate avioane sunt de tipul 1 sau 2, pentru a putea aplica qsort pe avioanele de tipul 1 si 2 ca sa le pot sorta in functie de codul aeroportului. Apoi, in functie de cate avioane sunt cu acelasi cod al aeroportului, aplic qsort pentru a le sorta in functie de viteze, dupa care afisez vectorul info similar cu taskul 1.

La taskul 4 am salvat numarul de avioane in remaining_planes, dupa care, pentru fiecare avion, am verificat daca sunt de tipul 1 si pe directia N, S, W, E, asemanator ca la taskul 2, dupa care am comparat elementele din x si y(coordonatele obstacolelor) si am verificat daca se afla in calea avioanelor(daca se afla pe liniile sau coloanele avioanelor), dupa care am decrementat remaining_planes, iar la sfarsit l am afisat. Daca remaining_planes este mai mic ca 0, afisez 0.    